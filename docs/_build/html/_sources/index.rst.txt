.. micromanager documentation master file, created by
   sphinx-quickstart on Wed Feb  1 18:04:43 2017.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to micromanager's documentation!
========================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:



General
=======

Features
--------
- admin
- generic
- does not come with user or authentication models and thus is easily compatible with your project
- write templates/themes using django syntax
- the cms page editing and management interface derives from your templates


Missing
-------
There are currently no tests, micromanager still is experimental. There will be tests in the beta stage.


Dependencies
------------
- django_imagekit>=3.3
- django_cleanup>=0.4.2
- django_widget_tweaks>=1.4.1


Installation
------------

To install micromanager download the source code on GitHub and place the micromanager folder into your django project folder.
Then run ::

    pip install -r requirements.txt

from within the micromanager folder to install its dependencies. To use micromanager you will need a authentication mechanism with templates/login pages and a superuser.
There is a very basic authentication app in the demo which you can copy but this is not recommended.
micromanager itself does not ship with authentication apps because many other django apps do and micromanager aims to be pluggable.


Demo
----
To check out the demo do the following:

1. Download/decompress or clone micromanager from github
2. Create a virtual python environment ::

	cd micromanager/demo
	virtualenv venv
	source venv/bin/activate

3. Install django in your virtual environment ::

	pip install django

4. install micromanager requirements ::

	cd mmdemo
	pip install -r micromanager/requirements.txt

5. run the development server from within demo/mmdemo ::

	python manage.py runserver 8080

6. open in the browser ::

	http://localhost:8080

7. log in on the top right to access admin ::

	username: admin
	password: admin


Theming
=======
You create a Theme by creating django templates. Using micromanager template tags you define the sections the user can edit.
micromanager does not define any page parts like navigation. Its up to the theme programmer to define and name such things.

The MicroContent concept
------------------------
You basically just write an html/css/javascript website as a theme.
If there is a paragraph or other component where the content (text, images) has to come from an editor using the admin panel, you place a micromanager template tag like ``cms_get_microcontent``. Example: ::

	<p>{% cms_get_microcontent 'example_paragraph_content' %}</p>

The argument ``example_paragraph_content`` names the microcontent. The name will be displayed in the admin (page edit) together with a text input field. By default, the editor can only input text an do no layouting at all. You can allow layouting with the arguments ``layoutable-simple`` and ``layoutable-full``.

micromanager template tags have two functions:

- fetching user created content from the database
- defining editable content parts in the theme

Files and location of a Theme
-----------------------------

Take a look at the demo theme in micromanager/themes.
Themes are subfolders of micromanager/themes and at least consist of

- settings.json file
- templates/base.html
- one html page template in templates/pages

Optionally there is the folder templates/content which contains templates for content that is not a page (e.g. a news-template).


micromanager template tags
--------------------------
micromanager template tags are the interface between the theme/layout programmer and the editor (the person editing content in the admin panel).

cms_get_microcontent
####################

Examples: ::
	
	<p>{% cms_get_microcontent 'paragraph_content' %}</p>
	<p>{% cms_get_microcontent 'second_paragraph_content' 'layoutable-simple' %}</p>
	<p>{% cms_get_microcontent 'third_paragraph_content' 'layoutable-full' %}</p>
	<p>{% cms_get_microcontent 'fourth_paragraph_content' 'short' 'optional' %}</p>


The first argument names the content. The name of the content is displayed in the page editing interface in the admin.
The second argument in the example defines if and to what extent the editor may layout the content in the admin panel. The order of the arguments does not matter, except for tha name which has to come first and is the only required argument.

You can add the ``'optional'`` argument to make the content optional.

This template tag fetches one content of its name and immediately displays it as html.

cms_get_microcontents
#####################

Does the same as ``cms_microcontent`` but fetches multiple content of this name. Multiple Text input boxes are displayed in the admin.

Examples: ::

	{% cms_get_microcontents 'multi_content' %}
	{% for content in multi_content %}
		<p>
			{{ content }}
		</p>
	{% endfor %}

More examples: ::

	{% cms_get_microcontents 'second_multi_content' 'layoutable-simple' min=2 %}
	{% cms_get_microcontents 'third_multi_content' max=3 %}
	{% cms_get_microcontents 'fourth_multi_content' min=2 max=3 %}

In addition the ``layoutable-*`` arguments ``get_microcontents`` supports the optional ``min`` and ``max`` keyword arguments defining the minimium and maximum number of content the editor may create in the admin.

As ``cms_get_microcontents`` fetches multiple database entries, you have to iterate to display the content.


cms_get_image
#############

Examples: ::

	{% cms_get_image 'example-image' as example_image %}
	<img src="{{ example_image.url }}" />

Displays an image input in the admin and fetches an image instance from the database.


cms_get_images
##############

Examples: ::

	{% cms_get_images 'multi_image' as images %}
	{% for image in images %}
		<img src="{{ image.url }}" />
	{% endfor %}

More Examples: ::

	{% cms_get_images 'multi_image' min=2 as images %}
	{% cms_get_images 'multi_image' max=3 as images %}
	{% cms_get_images 'multi_image' min=2 max=3 as images %}

Fetches multiple images of the defined name. It supports the optional ``min`` and ``max`` keyword arguments and the ``optional`` argument.


get_content_by_type
###################

In the admin, the editor can assign types to pages. Available types are defined in ``settings.json`` by the theme creator.
Types can be used for displaying pages in the navigation.

Example: ::

	{% get_content_by_type 'Navigation' as navpages %}

	<ul class="nav navbar-nav">
		{% for page in navpages %}
			{% if page.page.is_home_page %}
			{% else %}
				<li><a href="{% url 'micromanager_page' page.slug %}{% if preview %}?preview=1{% endif %}">{{ page.title }}</a></li>
			{% endif %}
		{% endfor %}
	</ul>


micromanager template tags for templated content
------------------------------------------------

Sometimes the micromanager tags are not enough. You might want to include content that is templated by itself.

get_template_content
####################

Example: ::

	{% get_template_content 'content/news.html' limit=3 as newspages %}
	{% for news in newspages %}
		{% include_content news %}
	{% endfor %}

Fetches 3 database entries for the content template 'content/news.html'. This tag has to be used in conjunction with the ``{% include_content NAME %}`` tag to render the content.
This template tag does not display any input fields in the page editing within the admin because

include_latest_content
######################

Example: ::

	{% include_latest_content 'content/news.html' %}

Directly renders the latest database entry for 'content/news.html'.


settings.json
-------------
The ``settings.json`` file defines the cornerstones of your theme.

Example: ::

	{
		"min_micromanager_version" : 1,
		"name" : "Demo Theme",
		"navigations" : ["Navigation", "Footer"],
		"sections" : {
			"Blog" : {
				"extends" : "blog_base.html"
			}
		},
		"verbose_template_names" : {
			"pages/free_page.html" : {
				"en" : "Free Page"
			},
			"pages/home.html" : {
				"en" : "Home Page Stripes"
			},
			"content/news.html" : {
				"en" : "Test include tag"
			}
		}
	}

``navigations`` define the navigations the editor can assign pages to. 

``Sections`` are used if a separate ``base.html`` template is needed.

``verbose_template_names`` assign human-readable names to templates. These human-readable names are displayed in the admin when creating a new page form a template.

Support
=======

If you are having issues, please let us know via GitHub issue tracker.


License
=======

micromanager is licensed under the BSD license.
